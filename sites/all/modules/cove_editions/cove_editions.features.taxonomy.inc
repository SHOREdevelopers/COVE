<?php
/**
 * @file
 * cove_editions.features.taxonomy.inc
 */

/**
 * Implements hook_taxonomy_default_vocabularies().
 */
function cove_editions_taxonomy_default_vocabularies() {
  return array(
    'city' => array(
      'name' => 'City',
      'machine_name' => 'city',
      'description' => 'Tags sourced from OpenCalais about City.',
      'hierarchy' => 0,
      'module' => 'opencalais',
      'weight' => -4,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'continent' => array(
      'name' => 'Continent',
      'machine_name' => 'continent',
      'description' => 'Tags sourced from OpenCalais about Continent.',
      'hierarchy' => 0,
      'module' => 'opencalais',
      'weight' => 4,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'country' => array(
      'name' => 'Country',
      'machine_name' => 'country',
      'description' => 'Tags sourced from OpenCalais about Country.',
      'hierarchy' => 0,
      'module' => 'opencalais',
      'weight' => 5,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'edition_state' => array(
      'name' => 'Edition state',
      'machine_name' => 'edition_state',
      'description' => 'The workflow-state of a given edition, from prototype to peer-reviewed',
      'hierarchy' => 0,
      'module' => 'taxonomy',
      'weight' => 0,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'natural_feature' => array(
      'name' => 'Natural Feature',
      'machine_name' => 'natural_feature',
      'description' => 'Tags sourced from OpenCalais about Natural Feature.',
      'hierarchy' => 0,
      'module' => 'opencalais',
      'weight' => 9,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'nines_discipline' => array(
      'name' => 'NINES Discipline',
      'machine_name' => 'nines_discipline',
      'description' => 'information about the disciplines that may be interested in the object, for NINES RDF export',
      'hierarchy' => 0,
      'module' => 'taxonomy',
      'weight' => 0,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'nines_genre' => array(
      'name' => 'NINES Genre',
      'machine_name' => 'nines_genre',
      'description' => 'Each object is required to have at least one valid genre, for NINES RDF export',
      'hierarchy' => 0,
      'module' => 'taxonomy',
      'weight' => 0,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'nines_type' => array(
      'name' => 'NINES Type',
      'machine_name' => 'nines_type',
      'description' => 'adapted from the DCMI list of types, this term should describe the medium, or format of the object for NINES RDF export',
      'hierarchy' => 0,
      'module' => 'taxonomy',
      'weight' => 0,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'organization' => array(
      'name' => 'Organization',
      'machine_name' => 'organization',
      'description' => 'Tags sourced from OpenCalais about Organization.',
      'hierarchy' => 0,
      'module' => 'opencalais',
      'weight' => 10,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'person' => array(
      'name' => 'Person',
      'machine_name' => 'person',
      'description' => 'Tags sourced from OpenCalais about Person.',
      'hierarchy' => 0,
      'module' => 'opencalais',
      'weight' => -6,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'province_or_state' => array(
      'name' => 'Province Or State',
      'machine_name' => 'province_or_state',
      'description' => 'Tags sourced from OpenCalais about Province Or State.',
      'hierarchy' => 1,
      'module' => 'opencalais',
      'weight' => 10,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'region' => array(
      'name' => 'Region',
      'machine_name' => 'region',
      'description' => 'Tags sourced from OpenCalais about Region.',
      'hierarchy' => 0,
      'module' => 'opencalais',
      'weight' => 10,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
    'vocabulary_3' => array(
      'name' => 'Tags',
      'machine_name' => 'vocabulary_3',
      'description' => 'Tags for all of Romantic Circles Pages (i.e. not Blog entries or Stories)',
      'hierarchy' => 1,
      'module' => 'taxonomy',
      'weight' => -5,
      'rdf_mapping' => array(
        'rdftype' => array(
          0 => 'skos:ConceptScheme',
        ),
        'name' => array(
          'predicates' => array(
            0 => 'dc:title',
          ),
        ),
        'description' => array(
          'predicates' => array(
            0 => 'rdfs:comment',
          ),
        ),
      ),
    ),
  );
}
