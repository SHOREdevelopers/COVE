<?php

/**
 * Implements hook_menu().
 */
function annotation_menu() {
  $items = array();

  // Index; API endpoint
  $items['annotation/api'] = array(
    'page callback' => 'annotation_api',
    'access callback' => /*'annotation_method_access'*/TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'annotation.store.inc',
  );
  // Create; API endpoint to create annotations
  $items['annotation/api/annotations'] = array(
    'page callback' => 'annotation_api_endpoint',
    'access callback' => /*'annotation_method_access'*/TRUE,
    'access arguments' => array('', 'annotation', NULL),
    'type' => MENU_CALLBACK,
    'file' => 'annotation.store.inc',
  );
  $items['annotation/api/annotations/%'] = array(
    'page callback' => 'annotation_api_endpoint',
    'page arguments' => array(3),
    'access callback' => /*'annotation_method_access'*/TRUE,
    'access arguments' => array('', 'annotation', 3),
    'type' => MENU_CALLBACK,
    'file' => 'annotation.store.inc',
  );
  $items['annotation/api/search'] = array(
    'page callback' => 'annotation_api_search',
//    'access callback' => 'annotation_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'annotation.store.inc',
  );
  return $items;
}

/**
 * Access callback.
 */
function annotation_access($op, $entity = NULL, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  if ($account->uid == 1) {
    return TRUE;
  }

  switch ($op) {
    case 'create':
      return user_access('administer nodes', $account)
          || user_access('create annotation content', $account);
    case 'view':
      return ($entity->uid == $account->uid)
          || user_access('administer nodes', $account)
          || (($entity->status == 1) && user_access('access content', $account));
    case 'edit':
      return user_access('administer nodes', $account)
          || user_access('edit any annotation content', $account)
          || (($entity->uid == $account->uid) && user_access('edit own annotation content', $account));
    case 'delete':
      return user_access('administer nodes', $account)
          || user_access('delete any annotation content', $account)
          || (($entity->uid == $account->uid) && user_access('delete own annotation content', $account));
  }
}

/**
 * Method dependent access callback
 * @see annotation_api_endpoint()
 */
function annotation_entity_method_access($op, $entity_type, $entity = NULL, $account = NULL) {
  $method = $_SERVER['REQUEST_METHOD'];

  switch ($method) {
    case 'GET':
      if (isset($entity) && is_numeric($id)) {
        annotation_api_read($id);
        // entity_access('view', $entity_type, $entity = NULL, $account = NULL);
      }
      else {
        annotation_api_index();
        // entity_access('view', $entity_type, $entity = NULL, $account = NULL);
      }
      break;
    case 'POST':
      annotation_api_create();
      // entity_access('create', $entity_type, $entity = NULL, $account = NULL);
      break;
    case 'PUT':
      annotation_api_update($id);
      break;
    case 'DELETE':
      annotation_api_destroy($id);
      break;
  }
}

/**
 * Menu argument loader: loads a annotation type by string.
 *
 * @param $name
 *   The machine-readable name of a node type to load, where '_' is replaced
 *   with '-'.
 *
 * @return
 *   A node type object or FALSE if $name does not exist.
 */
function annotation_type_load($name) {
  $annotation_entity = entity_get_info('annotation');
  $bundle = $annotation_entity['bundles'][$name];
  $bundle['type'] = $name;
  //$type = ctools_export_crud_load('file_type', $name);
  return (object)$bundle;
}

function annotation_type_get_names() {
  $names = &drupal_static(__FUNCTION__);

  if (!isset($names)) {
    $info = entity_get_info('annotation');
    foreach ($info['bundles'] as $bundle => $bundle_info) {
      $names[$bundle] = $bundle_info['label'];
    }
  }

  return $names;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function annotation_ctools_plugin_directory($module, $plugin) {
  if ($module == 'annotator') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function annotation_ctools_plugin_type() {
  return array(
    'annotator' => array(
      'cache' => FALSE,
    ),
  );
}

/**
 * Hide fields that users should not be able to edit
 **/
function annotation_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'annotation_node_form') {
    $form['ranges'] = array('#access' => FALSE);
    $form['annotation_reference'] = array('#access' => FALSE);
    $form['quote'] = array('#access' => FALSE);
    $form['uri'] = array('#access' => FALSE);
    // $form['category'] = array('#access' => FALSE);
  }
  return($form);
}

/***
 *
 * Set privacy on annotation nodes
 * Draws heavily on node_access_example.module
 * Translates the Annotator Permission module settings for each annotation
 * into access controls on the Annotation nodes themselves
 * so that Drupal will respect the user's preferences for each annotation
 *
 *
 *  Mike Widner <mikewidner@stanford.edu>
 *
 ***/

// adds a few permissions beyond the default ones for a node type
function annotation_permission() {
  return array(
    'access any private annotation' => array(
      'title' => t('Access any private annotation'),
      'description' => t('May view annotations of other users even if marked private.'),
    ),
    'edit any private annotation' => array(
      'title' => t('Edit any private annotation'),
      'description' => t('May edit annotations of other users even if marked private.'),
    ),
  );
}

// @see http://www.phase2technology.com/blog/drupal-7-node-access-grants-locks-and-keys/
// Don't use hook_node_access()
// Use hook_node_grants()
// So that's what we're doing here
define('ANNOTATION_GRANT_ACCESS_ALL', 7);
function annotation_node_grants($account, $op) {
  $grants = array();
  // Grant users access to their own annotations
  if ($account->uid) {
    $grants['annotation_author'] = array($account->uid);
  }

  // If "access any private annotation" is allowed to the account,
  // grant view, update, or delete as necessary.
  if ($op == 'view' && user_access('access any private annotation', $account)) {
    $grants['annotation_view'] = array(ANNOTATION_GRANT_ACCESS_ALL);
  }

  if (($op == 'update' || $op == 'delete') && user_access('edit any private annotation', $account)) {
    $grants['annotation_edit'] = array(ANNOTATION_GRANT_ACCESS_ALL);
  }
  return $grants;
}

function annotation_node_access_records($node) {
  // We only care about the node if it's been marked private. If not, it is
  // treated just like any other node and we completely ignore it.
  // We're using list_boolean as our privacy setting field
  if (!empty($node->private) && $node->private[$node->language][0]['value'] == 1) {
    $grants = array();
    $grants[] = array(
      'realm' => 'annotation_view',
      'gid' => ANNOTATION_GRANT_ACCESS_ALL,
      'grant_view' => $node->status,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 100,
    );
    $grants[] = array(
      'realm' => 'annotation_edit',
      'gid' => ANNOTATION_GRANT_ACCESS_ALL,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 100,
    );

    // For the annotation_author realm, the grant ID (gid) is
    // equivalent to the node author's user ID (UID).
    // We check the node UID so that we don't grant author privileges for
    // anonymous nodes to anonymous users.
    if ($node->uid) {
      $grants[] = array(
        'realm' => 'annotation_author',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 100,
      );
    }
    return $grants;
  }
  // Return nothing if the node has not been marked private.
}
